# -*- coding: utf-8 -*-
"""한파 데이터 분석 프로젝트의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LMbwReEmPusW9FErm4MVq84lGGvpBrEn

##1.데이터 불러오기
"""

# 한글 폰트 설치를 위한 코드
# 코드 블록 실행 후 "런타임 -> 세션 다시시작"을 누른 다음에 코드 작성 시작하기
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -f
!rm ~/.cache/matplotlib -rf

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

df1=pd.read_csv('/content/drive/MyDrive/data/1.csv')
df2=pd.read_csv('/content/drive/MyDrive/data/2.csv')
df3=pd.read_csv('/content/drive/MyDrive/data/3.csv')
df4=pd.read_csv('/content/drive/MyDrive/data/4.csv')
df5=pd.read_csv('/content/drive/MyDrive/data/5.csv')
df6=pd.read_csv('/content/drive/MyDrive/data/6.csv')
df7=pd.read_csv('/content/drive/MyDrive/data/7.csv')
df8=pd.read_csv('/content/drive/MyDrive/data/8.csv')
df9=pd.read_csv('/content/drive/MyDrive/data/9.csv')
df10=pd.read_csv('/content/drive/MyDrive/data/10.csv')
df11=pd.read_csv('/content/drive/MyDrive/data/11.csv')
df12=pd.read_csv('/content/drive/MyDrive/data/12.csv')
df13=pd.read_csv('/content/drive/MyDrive/data/13.csv')
df14=pd.read_csv('/content/drive/MyDrive/data/14.csv')
df15=pd.read_csv('/content/drive/MyDrive/data/15.csv')
df16=pd.read_csv('/content/drive/MyDrive/data/16.csv')

df1.info()

df1.head()

# 데이터 프레임 합치기

dfs = [df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12, df13, df14, df15, df16]

df = pd.concat(dfs, ignore_index=True)

df.info()

# 1단계: 기본 통계 분석

# 각 열의 통계값 계산
summary_stats = df.describe()
summary_stats

import os

os.chdir('/usr/share/fonts/truetype/nanum')
print(os.getcwd())

# Commented out IPython magic to ensure Python compatibility.
# 그래프 그릴 준비 ***
import matplotlib.pyplot as plt
from matplotlib import font_manager, rc
import seaborn as sns

# 나눔 폰트 설정
font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'
font = font_manager.FontProperties(fname=font_path).get_name()
rc('font', family=font) # 폰트 설정
rc('axes', unicode_minus=False) # 마이너스 폰트 설정
# %config InlineBackend.figure_format='retina' # 그래프 글씨 뚜렷

# 연도별 한파특보 발생 빈도 계산 및 시각화  ***/따라치기

dfy = df.copy()

# '일시' 열에서 연도 추출
dfy['연도'] = pd.to_datetime(dfy['일시']).dt.year

# '한파특보(O/X)' 열에서 'O'인 경우만 필터링
cold_wave_warnings = dfy[dfy['한파특보(O/X)'] == '주의보']

# 연도별 한파특보 발생 빈도 계산
yearly_cold_wave_warnings = cold_wave_warnings['연도'].value_counts().sort_index()

# 연도별 한파특보 발생 빈도 시각화
plt.figure(figsize=(10,6))
plt.bar(yearly_cold_wave_warnings.index, yearly_cold_wave_warnings.values, color='skyblue')
plt.title('연도별 한파특보 발생 빈도')
plt.xlabel('연도')
plt.ylabel('한파특보 발생 빈도')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# df를 dfm으로 복사***/따라치기
dfm = df.copy()

# '일시' 열에서 연도와 월 추출
dfm['일시'] = pd.to_datetime(dfm['일시'])
dfm['연도'] = dfm['일시'].dt.year
dfm['월'] = dfm['일시'].dt.month

# 11월부터 4월까지의 데이터만 필터링
dfm = dfm[(dfm['월'] >= 11) | (dfm['월'] <= 4)]

# '한파특보(O/X)' 열에서 'O'인 경우만 필터링
cold_wave_warnings = dfm[dfm['한파특보(O/X)'] == '주의보']

# 연도와 월별 한파특보 발생 빈도 계산
year_month_cold_wave_warnings = cold_wave_warnings.groupby(['연도', '월']).size().reset_index(name='빈도')

# 연도와 월을 문자열로 합쳐서 시각화
year_month_cold_wave_warnings['연도_월'] = year_month_cold_wave_warnings['연도'].astype(str) + '-' + year_month_cold_wave_warnings['월'].astype(str).str.zfill(2)

# 시각화
plt.figure(figsize=(12, 8))
plt.bar(year_month_cold_wave_warnings['연도_월'], year_month_cold_wave_warnings['빈도'], color='skyblue')
plt.title('연도-월별 한파특보 발생 빈도')
plt.xlabel('연도-월')
plt.ylabel('한파특보 발생 빈도')
plt.xticks(rotation=90)  # x축 레이블이 겹치지 않도록 회전
plt.tight_layout()
plt.show()

# '일최저기온(°C)'을 기준으로 한파 발생일과 비발생일의 기온 데이터 추출
cold_wave_dates = df[df['한파특보(O/X)'] == '주의보']['일최저기온(°C)']
non_cold_wave_dates = df[df['한파특보(O/X)'] == 'X']['일최저기온(°C)']

# 기온 데이터 시각화
plt.figure(figsize=(12, 6))

# 한파 발생일 기온 히스토그램
plt.hist(cold_wave_dates.dropna(), bins=30, alpha=0.7, label='한파 발생일 기온', color='red')

# 비발생일 기온 히스토그램
plt.hist(non_cold_wave_dates.dropna(), bins=30, alpha=0.7, label='비발생일 기온', color='blue')

# 그래프 설정
plt.title('한파 발생과 비발생일 기온 비교')
plt.xlabel('기온 (°C)')
plt.ylabel('빈도')
plt.legend()
plt.grid(True)
plt.tight_layout()

plt.show()

# 데이터프레임에서 관심 있는 변수들만 선택
variables = ['일최저체감온도(°C)', '일최고기온(°C)', '일평균기온(°C)', '일평균상대습도(%)', '일평균풍속(m/s)']
df_vars = df[variables + ['한파특보(O/X)']].copy()

# '한파특보(O/X)'를 0과 1로 변환
df_vars['한파특보(O/X)'] = df_vars['한파특보(O/X)'].apply(lambda x: 1 if x == '주의보' else 0)

# 상관 행렬 계산
correlation_matrix = df_vars.corr()

# 상관 행렬 시각화
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', vmin=-1, vmax=1)
plt.title('상관 행렬')
plt.show()

#회귀분석 진행

import statsmodels.api as sm

# 데이터프레임에서 관심 있는 변수들만 선택
variables = ['일평균기온(°C)', '일평균상대습도(%)', '일평균풍속(m/s)']
df_vars = df[variables + ['한파특보(O/X)']].dropna()

# '한파특보(O/X)'를 0과 1로 변환
df_vars['한파특보(O/X)'] = df_vars['한파특보(O/X)'].apply(lambda x: 1 if x == '주의보' else 0)

# 독립 변수와 종속 변수 설정
X = df_vars[variables]
y = df_vars['한파특보(O/X)']

# 상수항 추가
X = sm.add_constant(X)

# 회귀 모델 적합
model = sm.Logit(y, X)
result = model.fit()

# 결과 출력
print(result.summary())

